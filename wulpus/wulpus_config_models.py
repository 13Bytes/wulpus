import numpy as np
from pydantic import BaseModel, Field, field_validator
from typing import Union, Literal, Tuple, get_args
from wulpus.wulpus_api_helper import TX_RX_MAX_NUM_OF_CONFIGS, us_to_ticks

# Available RX gain in dB
PGA_GAIN = Literal[-6.5, -5.5, -4.6, -4.1, -3.3, -2.3, -1.4, -0.8,
                   0.1, 1.0, 1.9, 2.6, 3.5, 4.4, 5.2, 6.0, 6.8, 7.7,
                   8.7, 9.0, 9.8, 10.7, 11.7, 12.2, 13, 13.9, 14.9,
                   15.5, 16.3, 17.2, 18.2, 18.8, 19.6, 20.5, 21.5,
                   22, 22.8, 23.6, 24.6, 25.0, 25.8, 26.7, 27.7,
                   28.1, 28.9, 29.8, 30.8]
PGA_GAIN_VALUE: Tuple[PGA_GAIN, ...] = get_args(PGA_GAIN)

# Oversampling rate register values to be sent to HW
USS_CAPT_OVER_SAMPLE_RATES_REG = (0, 1, 2, 3, 4)

# Register PGA RX gain value to write to HW
PGA_GAIN_REG = tuple(np.arange(17, 64))

# Acquisition rates
# # USS_CAPTURE_OVER_SAMPLE_RATES = Literal[10, 20, 40, 80, 160]
# # USS_CAPTURE_OVER_SAMPLE_RATES_VALUE: Tuple[USS_CAPTURE_OVER_SAMPLE_RATES, ...] = get_args(
# #     USS_CAPTURE_OVER_SAMPLE_RATES)
# # USS_CAPTURE_ACQ_RATES = [80e6/x for x in USS_CAPTURE_OVER_SAMPLE_RATES_VALUE]
USS_CAPTURE_ACQ_RATES = Literal[8000000, 4000000, 2000000, 1000000, 500000]
USS_CAPTURE_ACQ_RATES_VALUE: Tuple[USS_CAPTURE_ACQ_RATES, ...] = get_args(
    USS_CAPTURE_ACQ_RATES)


class UsConfig(BaseModel):
    # Number of acquisitions to perform.
    num_acqs: int = Field(default=400, ge=0)
    # DC-DC turn on time in microseconds.
    dcdc_turnon: int = Field(
        default=195300, ge=0, le=2000000)
    # Measurement period in microseconds.
    meas_period: int = Field(default=321965, ge=655, le=2000000)
    # Transducer frequency in Hertz.
    trans_freq: int = Field(default=225e4, ge=0, le=5000000)
    # Pulse frequency in Hertz.
    pulse_freq: int = Field(default=225e4, ge=0, le=5000000)
    # Number of pulses to excite the transducer.
    num_pulses: int = Field(default=2, ge=0, le=30)
    # Sampling frequency in Hertz.
    sampling_freq: USS_CAPTURE_ACQ_RATES = USS_CAPTURE_ACQ_RATES_VALUE[0]
    # Number of samples to acquire.
    num_samples: int = Field(default=400, ge=0, le=800)
    # RX gain in dB. (must be one of PGA_GAIN)
    rx_gain: PGA_GAIN = PGA_GAIN_VALUE[-10]
    # Number of TX/RX configurations.
    num_txrx_configs: int = Field(default=1, ge=0, le=16)
    # TX configurations. (Generated by WulpusRxTxConfigGen)
    tx_configs: list[int] = Field(default_factory=lambda: [0], max_length=16)
    # RX configurations. (Generated by WulpusRxTxConfigGen)
    rx_configs: list[int] = Field(default_factory=lambda: [0], max_length=16)
    # HV-MUX RX start time in microseconds.
    start_hvmuxrx: int = Field(
        default=500, ge=0, le=int(65535/us_to_ticks['start_hvmuxrx']))
    # PPG start time in microseconds.
    start_ppg: int = Field(default=500, ge=0, le=int(65535 /
                           us_to_ticks['start_ppg']))
    # ADC turn on time in microseconds.
    turnon_adc: int = Field(default=5, ge=0, le=int(65535 /
                            us_to_ticks['turnon_adc']))
    # PGA in bias start time in microseconds.
    start_pgainbias: int = Field(default=5, ge=0, le=int(65535 /
                                 us_to_ticks['start_pgainbias']))
    # ADC sampling start time in microseconds.
    start_adcsampl: int = Field(default=503, ge=0, le=int(65535 /
                                us_to_ticks['start_adcsampl']))
    # Capture restart time in microseconds.
    restart_capt: int = Field(default=3000, ge=0, le=int(65535 /
                              us_to_ticks['restart_capt']))
    # Capture timeout time in microseconds.
    capt_timeout: int = Field(default=3000, ge=0, le=int(65535 /
                              us_to_ticks['capt_timeout']))


MAX_CH_ID = 7


class TxRxConfig(BaseModel):
    config_id: int = Field(default=0, ge=0, lt=TX_RX_MAX_NUM_OF_CONFIGS)
    tx_channels: list[int] = Field(
        default_factory=list, max_length=MAX_CH_ID+1)
    rx_channels: list[int] = Field(
        default_factory=list, max_length=MAX_CH_ID+1)
    optimized_switching: bool = True

    @field_validator('tx_channels', 'rx_channels', mode='after')
    @classmethod
    def validate_channel_ids(cls, channels):
        for ch in channels:
            if not (0 <= ch <= MAX_CH_ID):
                raise ValueError(
                    f"Channel ID {ch} must be between 0 and {MAX_CH_ID}")
            return channels


class WulpusConfig(BaseModel):
    tx_rx_config: list[TxRxConfig] = Field(
        min_length=1, max_length=TX_RX_MAX_NUM_OF_CONFIGS)
    us_config: UsConfig


class ComPort(BaseModel):
    com_port: str
